#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/led/led.h>

&pinctrl {
  spi3_default: spi3_default {
    group1 {
      psels = <NRF_PSEL(SPIM_MOSI, 0, 3)>;
    };
  };

  spi3_sleep: spi3_sleep {
    group1 {
      psels = <NRF_PSEL(SPIM_MOSI, 0, 3)>;
      low-power-enable;
    };
  };
};

&spi3 {
  compatible = "nordic,nrf-spim";
  status = "okay";

  pinctrl-0 = <&spi3_default>;
  pinctrl-1 = <&spi3_sleep>;
  pinctrl-names = "default", "sleep";

  led_strip: ws2812@0{
    compatible = "worldsemi,ws2812-spi";
    label = "SK6812";

    reg = <0>;
    spi-max-frequency = <4000000>;

    chain-length = <30>;
    spi-one-frame = <0x70>;
    spi-zero-frame = <0x40>;
    color-mapping = <LED_COLOR_ID_GREEN
                     LED_COLOR_ID_RED
                     LED_COLOR_ID_BLUE>;
  };
};

&xiao_spi {
  status = "okay";

  cs-gpios = <&xiao_d 2 GPIO_ACTIVE_LOW 
    &xiao_d 1 GPIO_ACTIVE_LOW 
    &xiao_d 0 GPIO_ACTIVE_HIGH>;

  expander: mcp23sxx@0 {
    compatible = "microchip,mcp23sxx";
    status = "okay";    
    gpio-controller;
    spi-max-frequency = <800000>;
    reg = <0>;
    label = "MCP23S17";
    #gpio-cells = <2>;
    ngpios = <16>;
    int-gpios = <&xiao_d 5 GPIO_ACTIVE_LOW>;

    led_disable {
      gpio-hog;
      gpios = <6 GPIO_ACTIVE_HIGH>;
      output-high;
    };
  };

  nice_view: ls0xx@2 {
    compatible = "sharp,ls0xx";
    label = "NICE_VIEW";
    spi-max-frequency = <1000000>;
    reg = <2>;
    width = <160>;
    height = <68>;
  };
};

/ {
  chosen {
    zmk,kscan = &kscan_composite;
    zmk,matrix_transform = &default_transform;
    zephyr,display = &nice_view;
    zmk,underglow = &led_strip;
  };

  default_transform: keymap_transform_0 {
    compatible = "zmk,matrix-transform";
    columns = <12>;
    rows = <6>;
    map = <
      RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)                 RC(0,6) RC(0,7) RC(0,8)  RC(0,9)  RC(0,10) RC(0,11)
      RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)                 RC(1,6) RC(1,7) RC(1,8)  RC(1,9)  RC(1,10) RC(1,11)
      RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)                 RC(2,6) RC(2,7) RC(2,8)  RC(2,9)  RC(2,10) RC(2,11)
      RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(4,5) RC(4,6) RC(3,6) RC(3,7) RC(3,8)  RC(3,9)  RC(3,10) RC(3,11)
      RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,7) RC(4,8) RC(4,9) RC(4,10) RC(4,11)
      RC(5,0) RC(5,1) RC(5,2) RC(5,3)
    >;
  };

  kscan_composite: kscan_composite {
    compatible = "zmk,kscan-composite";
    label = "KSCAN_COMPOSITE";

    columns = <12>;
    rows = <6>;

    matrix {
      kscan = <&kscan_matrix>;
    };

    direct {
      kscan = <&kscan_direct>;
      row-offset = <4>;
    };
  };

  kscan_matrix: kscan_matrix {
    compatible = "zmk,kscan-gpio-matrix";
    label = "KSCAN_MATRIX";

    diode-direction = "col2row";
    col-gpios
      = <&expander 0 (GPIO_ACTIVE_LOW)>
      , <&expander 1 (GPIO_ACTIVE_LOW)>
      , <&expander 2 (GPIO_ACTIVE_LOW)>
      , <&expander 3 (GPIO_ACTIVE_LOW)>
      , <&expander 4 (GPIO_ACTIVE_LOW)>
      , <&expander 5 (GPIO_ACTIVE_LOW)>
      ;
    wakeup-source;
  };

  kscan_direct: kscan_direct {
    compatible = "zmk,kscan-gpio-direct";
    label = "KSCAN_DIRECT";
    input-gpios = <&expander 13 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
    wakeup-source;
  };

  left_encoder: encoder_left {
    compatible = "alps,ec11";
    label = "LEFT_ENCODER";
    a-gpios = <&gpio0 9 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
    b-gpios = <&gpio0 10 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
    status = "disabled";
    steps = <80>;
  };

  right_encoder: encoder_right {
    compatible = "alps,ec11";
    label = "RIGHT_ENCODER";
    a-gpios = <&xiao_d 10 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
    b-gpios = <&xiao_d 9 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
    status = "disabled";
    steps = <80>;
  };

  sensors {
    compatible = "zmk,keymap-sensors";
    sensors = <&left_encoder &right_encoder>;
    triggers-per-rotation = <20>;
  };

  keys {
    compatible = "gpio-keys";
    wakeup_key: wakeup_key {
      gpios = <&xiao_d 4 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
    };
  };

  behaviors {
    hw_soft_off: behavior_hw_soft_off {
      compatible = "zmk,behavior-soft-off";
      #binding-cells = <0>;
      label = "HW_SOFT_OFF";
      hold-time-ms = <1000>;
    };
  };

  soft_off_behavior_key {
    compatible = "zmk,behavior-key";
    bindings = <&hw_soft_off>;
    key = <&wakeup_key>;
    status = "okay";
  };

  wakeup_source: wakeup_source {
    compatible = "zmk,wakeup-trigger-key";
    trigger = <&wakeup_key>;
    wakeup-source;
  };

  soft_off_wakers {
    compatible = "zmk,soft-off-wakup-sources";
    wakeup-sources = <&wakeup_source>;
  };
};
